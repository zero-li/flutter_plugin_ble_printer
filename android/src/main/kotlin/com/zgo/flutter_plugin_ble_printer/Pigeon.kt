// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zgo.flutter_plugin_ble_printer

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FlutterPrintApi {
  /** 打印文本数据 */
  fun printText(text: String)

  /**
   * 打印图片
   * https://flutter.cn/docs/development/ui/assets-and-images#loading-flutter-assets-in-ios
   * flutter:
   *   assets:
   *     - icons/heart.png
   * filePath = assets/icons/heart.png
   *
   */
  fun printImage(x: Long, y: Long, filePath: String)

  /** 控制打印机走纸到标签缝隙（标缝） */
  fun form()

  /** 打印输出 */
  fun print()

  /** 获取状态 */
  fun getEndStatus(secondTimeout: Long): Long

  companion object {
    /** The codec used by FlutterPrintApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }

    /** Sets up an instance of `FlutterPrintApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: FlutterPrintApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.FlutterPrintApi.printText",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.printText(textArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.FlutterPrintApi.printImage",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val xArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val yArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val filePathArg = args[2] as String
            var wrapped: List<Any?>
            try {
              api.printImage(xArg, yArg, filePathArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.FlutterPrintApi.form",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.form()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.FlutterPrintApi.print",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.print()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(
          binaryMessenger,
          "dev.flutter.pigeon.FlutterPrintApi.getEndStatus",
          codec
        )
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val secondTimeoutArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getEndStatus(secondTimeoutArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
