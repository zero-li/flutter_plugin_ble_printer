// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "PigeonBluetooth.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FLTZgoBTDevice ()
+ (FLTZgoBTDevice *)fromList:(NSArray *)list;
+ (nullable FLTZgoBTDevice *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTZgoBTDevice
+ (instancetype)makeWithName:(NSString *)name
    address:(NSString *)address
    uuid:(NSString *)uuid
    state:(NSNumber *)state {
  FLTZgoBTDevice* pigeonResult = [[FLTZgoBTDevice alloc] init];
  pigeonResult.name = name;
  pigeonResult.address = address;
  pigeonResult.uuid = uuid;
  pigeonResult.state = state;
  return pigeonResult;
}
+ (FLTZgoBTDevice *)fromList:(NSArray *)list {
  FLTZgoBTDevice *pigeonResult = [[FLTZgoBTDevice alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.address = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.address != nil, @"");
  pigeonResult.uuid = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.uuid != nil, @"");
  pigeonResult.state = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.state != nil, @"");
  return pigeonResult;
}
+ (nullable FLTZgoBTDevice *)nullableFromList:(NSArray *)list {
  return (list) ? [FLTZgoBTDevice fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    (self.address ?: [NSNull null]),
    (self.uuid ?: [NSNull null]),
    (self.state ?: [NSNull null]),
  ];
}
@end

@interface FLTHostBluetoothApiCodecReader : FlutterStandardReader
@end
@implementation FLTHostBluetoothApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTZgoBTDevice fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTHostBluetoothApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTHostBluetoothApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTZgoBTDevice class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTHostBluetoothApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTHostBluetoothApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTHostBluetoothApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTHostBluetoothApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTHostBluetoothApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTHostBluetoothApiCodecReaderWriter *readerWriter = [[FLTHostBluetoothApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTHostBluetoothApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTHostBluetoothApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.isOn"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isOnWithError:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(isOnWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isOnWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.btState"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(btStateWithError:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(btStateWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api btStateWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 搜索蓝牙设备
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.scanBluetooth"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(scanBluetoothWithError:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(scanBluetoothWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api scanBluetoothWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止搜索蓝牙设备
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.stopScanBluetooth"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopScanBluetoothWithError:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(stopScanBluetoothWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopScanBluetoothWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 连接打印机
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.connectPrinter"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectPrinterDevice:error:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(connectPrinterDevice:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTZgoBTDevice *arg_device = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api connectPrinterDevice:arg_device error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 断开打印机
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.HostBluetoothApi.disconnectPrinter"
        binaryMessenger:binaryMessenger
        codec:FLTHostBluetoothApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectPrinterWithError:)], @"FLTHostBluetoothApi api (%@) doesn't respond to @selector(disconnectPrinterWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disconnectPrinterWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTFlutterBluetoothApiCodecReader : FlutterStandardReader
@end
@implementation FLTFlutterBluetoothApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [FLTZgoBTDevice fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FLTFlutterBluetoothApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTFlutterBluetoothApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FLTZgoBTDevice class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FLTFlutterBluetoothApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTFlutterBluetoothApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTFlutterBluetoothApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTFlutterBluetoothApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FLTFlutterBluetoothApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTFlutterBluetoothApiCodecReaderWriter *readerWriter = [[FLTFlutterBluetoothApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FLTFlutterBluetoothApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTFlutterBluetoothApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)whenFindAllDeviceList:(NSArray<FLTZgoBTDevice *> *)arg_list completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBluetoothApi.whenFindAllDevice"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterBluetoothApiGetCodec()];
  [channel sendMessage:@[arg_list ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onChangeAllDeviceStateList:(NSArray<FLTZgoBTDevice *> *)arg_list completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBluetoothApi.onChangeAllDeviceState"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterBluetoothApiGetCodec()];
  [channel sendMessage:@[arg_list ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)whenConnectSuccessDevice:(FLTZgoBTDevice *)arg_device completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBluetoothApi.whenConnectSuccess"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterBluetoothApiGetCodec()];
  [channel sendMessage:@[arg_device ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)whenConnectFailureWithErrorBlockDevice:(FLTZgoBTDevice *)arg_device error:(NSNumber *)arg_error completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterBluetoothApiGetCodec()];
  [channel sendMessage:@[arg_device ?: [NSNull null], arg_error ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)whenDisconnectDevice:(FLTZgoBTDevice *)arg_device isActive:(NSNumber *)arg_isActive completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect"
      binaryMessenger:self.binaryMessenger
      codec:FLTFlutterBluetoothApiGetCodec()];
  [channel sendMessage:@[arg_device ?: [NSNull null], arg_isActive ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

