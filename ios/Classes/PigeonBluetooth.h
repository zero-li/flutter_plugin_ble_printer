// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

typedef NS_ENUM(NSUInteger, FLTZgoBTConnectError) {
  FLTZgoBTConnectErrorBleTimeout = 0,
  FLTZgoBTConnectErrorBleDiscoverServiceTimeout = 1,
  FLTZgoBTConnectErrorBleValidateTimeout = 2,
  FLTZgoBTConnectErrorBleUnknownDevice = 3,
  FLTZgoBTConnectErrorBleSystem = 4,
  FLTZgoBTConnectErrorBleValidateFail = 5,
  FLTZgoBTConnectErrorStreamTimeout = 6,
  FLTZgoBTConnectErrorStreamEmpty = 7,
  FLTZgoBTConnectErrorStreamOccurred = 8,
};

@class FLTZgoBTDevice;

@interface FLTZgoBTDevice : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(NSString *)name
    address:(NSString *)address
    uuid:(NSString *)uuid
    state:(NSNumber *)state;
@property(nonatomic, copy) NSString * name;
@property(nonatomic, copy) NSString * address;
@property(nonatomic, copy) NSString * uuid;
@property(nonatomic, strong) NSNumber * state;
@end

/// The codec used by FLTHostBluetoothApi.
NSObject<FlutterMessageCodec> *FLTHostBluetoothApiGetCodec(void);

/// flutter call native
@protocol FLTHostBluetoothApi
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)isOnWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)btStateWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 搜索蓝牙设备
- (void)scanBluetoothWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 停止搜索蓝牙设备
- (void)stopScanBluetoothWithError:(FlutterError *_Nullable *_Nonnull)error;
/// 连接打印机
- (void)connectPrinterDevice:(FLTZgoBTDevice *)device error:(FlutterError *_Nullable *_Nonnull)error;
/// 断开打印机
- (void)disconnectPrinterWithError:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void FLTHostBluetoothApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTHostBluetoothApi> *_Nullable api);

/// The codec used by FLTFlutterBluetoothApi.
NSObject<FlutterMessageCodec> *FLTFlutterBluetoothApiGetCodec(void);

/// native call flutter
@interface FLTFlutterBluetoothApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
/// 获取已发现的所有打印机
- (void)whenFindAllDeviceList:(NSArray<FLTZgoBTDevice *> *)list completion:(void (^)(FlutterError *_Nullable))completion;
- (void)onChangeAllDeviceStateList:(NSArray<FLTZgoBTDevice *> *)list completion:(void (^)(FlutterError *_Nullable))completion;
- (void)whenConnectSuccessDevice:(FLTZgoBTDevice *)device completion:(void (^)(FlutterError *_Nullable))completion;
- (void)whenConnectFailureWithErrorBlockDevice:(FLTZgoBTDevice *)device error:(NSNumber *)error completion:(void (^)(FlutterError *_Nullable))completion;
///  断开连接的回调，调用disconnect断开打印机后，会调用该方法
///  YES表示主动断开，NO表示被动断开
- (void)whenDisconnectDevice:(FLTZgoBTDevice *)device isActive:(NSNumber *)isActive completion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
