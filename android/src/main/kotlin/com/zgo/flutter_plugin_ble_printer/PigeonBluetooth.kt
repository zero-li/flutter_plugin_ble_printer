// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.zgo.flutter_plugin_ble_printer

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
    if (exception is FlutterError) {
        return listOf(
            exception.code,
            exception.message,
            exception.details
        )
    } else {
        return listOf(
            exception.javaClass.simpleName,
            exception.toString(),
            "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
        )
    }
}


enum class ZgoBTConnectError(val raw: Int) {
    BLETIMEOUT(0),
    BLEDISCOVERSERVICETIMEOUT(1),
    BLEVALIDATETIMEOUT(2),
    BLEUNKNOWNDEVICE(3),
    BLESYSTEM(4),
    BLEVALIDATEFAIL(5),
    STREAMTIMEOUT(6),
    STREAMEMPTY(7),
    STREAMOCCURRED(8);

    companion object {
        fun ofRaw(raw: Int): ZgoBTConnectError? {
            return values().firstOrNull { it.raw == raw }
        }
    }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ZgoBTDevice(
    val name: String,
    val address: String,
    val uuid: String,
    val state: Long

) {
    companion object {
        @Suppress("UNCHECKED_CAST")
        fun fromList(list: List<Any?>): ZgoBTDevice {
            val name = list[0] as String
            val address = list[1] as String
            val uuid = list[2] as String
            val state = list[3].let { if (it is Int) it.toLong() else it as Long }
            return ZgoBTDevice(name, address, uuid, state)
        }
    }

    fun toList(): List<Any?> {
        return listOf<Any?>(
            name,
            address,
            uuid,
            state,
        )
    }
}

@Suppress("UNCHECKED_CAST")
private object HostBluetoothApiCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return when (type) {
            128.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ZgoBTDevice.fromList(it)
                }
            }
            else -> super.readValueOfType(type, buffer)
        }
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        when (value) {
            is ZgoBTDevice -> {
                stream.write(128)
                writeValue(stream, value.toList())
            }
            else -> super.writeValue(stream, value)
        }
    }
}

/**
 * flutter call native
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface HostBluetoothApi {
    fun isOn(): Boolean
    fun btState(): Long

    /** 搜索蓝牙设备 */
    fun scanBluetooth()

    /** 停止搜索蓝牙设备 */
    fun stopScanBluetooth()

    /** 连接打印机 */
    fun connectPrinter(device: ZgoBTDevice)

    /** 断开打印机 */
    fun disconnectPrinter()

    companion object {
        /** The codec used by HostBluetoothApi. */
        val codec: MessageCodec<Any?> by lazy {
            HostBluetoothApiCodec
        }

        /** Sets up an instance of `HostBluetoothApi` to handle messages through the `binaryMessenger`. */
        @Suppress("UNCHECKED_CAST")
        fun setUp(binaryMessenger: BinaryMessenger, api: HostBluetoothApi?) {
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.isOn",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        var wrapped: List<Any?>
                        try {
                            wrapped = listOf<Any?>(api.isOn())
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.btState",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        var wrapped: List<Any?>
                        try {
                            wrapped = listOf<Any?>(api.btState())
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.scanBluetooth",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        var wrapped: List<Any?>
                        try {
                            api.scanBluetooth()
                            wrapped = listOf<Any?>(null)
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.stopScanBluetooth",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        var wrapped: List<Any?>
                        try {
                            api.stopScanBluetooth()
                            wrapped = listOf<Any?>(null)
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.connectPrinter",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { message, reply ->
                        val args = message as List<Any?>
                        val deviceArg = args[0] as ZgoBTDevice
                        var wrapped: List<Any?>
                        try {
                            api.connectPrinter(deviceArg)
                            wrapped = listOf<Any?>(null)
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
            run {
                val channel = BasicMessageChannel<Any?>(
                    binaryMessenger,
                    "dev.flutter.pigeon.HostBluetoothApi.disconnectPrinter",
                    codec
                )
                if (api != null) {
                    channel.setMessageHandler { _, reply ->
                        var wrapped: List<Any?>
                        try {
                            api.disconnectPrinter()
                            wrapped = listOf<Any?>(null)
                        } catch (exception: Throwable) {
                            wrapped = wrapError(exception)
                        }
                        reply.reply(wrapped)
                    }
                } else {
                    channel.setMessageHandler(null)
                }
            }
        }
    }
}

@Suppress("UNCHECKED_CAST")
private object FlutterBluetoothApiCodec : StandardMessageCodec() {
    override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
        return when (type) {
            128.toByte() -> {
                return (readValue(buffer) as? List<Any?>)?.let {
                    ZgoBTDevice.fromList(it)
                }
            }
            else -> super.readValueOfType(type, buffer)
        }
    }

    override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
        when (value) {
            is ZgoBTDevice -> {
                stream.write(128)
                writeValue(stream, value.toList())
            }
            else -> super.writeValue(stream, value)
        }
    }
}

/**
 * native call flutter
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
@Suppress("UNCHECKED_CAST")
class FlutterBluetoothApi(private val binaryMessenger: BinaryMessenger) {
    companion object {
        /** The codec used by FlutterBluetoothApi. */
        val codec: MessageCodec<Any?> by lazy {
            FlutterBluetoothApiCodec
        }
    }

    /** 获取已发现的所有打印机 */
    fun whenFindAllDevice(listArg: List<ZgoBTDevice>, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.FlutterBluetoothApi.whenFindAllDevice",
            codec
        )
        channel.send(listOf(listArg)) {
            callback()
        }
    }

    fun onChangeAllDeviceState(listArg: List<ZgoBTDevice>, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.FlutterBluetoothApi.onChangeAllDeviceState",
            codec
        )
        channel.send(listOf(listArg)) {
            callback()
        }
    }

    fun whenConnectSuccess(deviceArg: ZgoBTDevice, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.FlutterBluetoothApi.whenConnectSuccess",
            codec
        )
        channel.send(listOf(deviceArg)) {
            callback()
        }
    }

    fun whenConnectFailureWithErrorBlock(
        deviceArg: ZgoBTDevice,
        errorArg: Long,
        callback: () -> Unit
    ) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock",
            codec
        )
        channel.send(listOf(deviceArg, errorArg)) {
            callback()
        }
    }

    /**
     *  断开连接的回调，调用disconnect断开打印机后，会调用该方法
     *  YES表示主动断开，NO表示被动断开
     */
    fun whenDisconnect(deviceArg: ZgoBTDevice, isActiveArg: Long, callback: () -> Unit) {
        val channel = BasicMessageChannel<Any?>(
            binaryMessenger,
            "dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect",
            codec
        )
        channel.send(listOf(deviceArg, isActiveArg)) {
            callback()
        }
    }
}
