// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

part of flutter_plugin_ble_printer;

enum ZgoBTConnectError {
  bleTimeout,
  bleDiscoverServiceTimeout,
  bleValidateTimeout,
  bleUnknownDevice,
  bleSystem,
  bleValidateFail,
  streamTimeout,
  streamEmpty,
  streamOccurred,
}

class ZgoBTDevice {
  ZgoBTDevice({
    required this.name,
    required this.address,
    required this.uuid,
    required this.state,
  });

  String name;

  String address;

  String uuid;

  int state;

  Object encode() {
    return <Object?>[
      name,
      address,
      uuid,
      state,
    ];
  }

  static ZgoBTDevice decode(Object result) {
    result as List<Object?>;
    return ZgoBTDevice(
      name: result[0]! as String,
      address: result[1]! as String,
      uuid: result[2]! as String,
      state: result[3]! as int,
    );
  }
}

class _HostBluetoothApiCodec extends StandardMessageCodec {
  const _HostBluetoothApiCodec();

  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ZgoBTDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ZgoBTDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// flutter call native
class HostBluetoothApi {
  /// Constructor for [HostBluetoothApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HostBluetoothApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HostBluetoothApiCodec();

  Future<bool> isOn() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.isOn', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<int> btState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.btState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  /// 搜索蓝牙设备
  Future<void> scanBluetooth() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.scanBluetooth', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 停止搜索蓝牙设备
  Future<void> stopScanBluetooth() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.stopScanBluetooth', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 连接打印机
  Future<void> connectPrinter(ZgoBTDevice arg_device) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.connectPrinter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_device]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 断开打印机
  Future<void> disconnectPrinter() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.HostBluetoothApi.disconnectPrinter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _FlutterBluetoothApiCodec extends StandardMessageCodec {
  const _FlutterBluetoothApiCodec();

  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ZgoBTDevice) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ZgoBTDevice.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

/// native call flutter
abstract class FlutterBluetoothApi {
  static const MessageCodec<Object?> codec = _FlutterBluetoothApiCodec();

  /// 获取已发现的所有打印机
  void whenFindAllDevice(List<ZgoBTDevice?> list);

  void onChangeAllDeviceState(List<ZgoBTDevice?> list);

  void whenConnectSuccess(ZgoBTDevice device);

  void whenConnectFailureWithErrorBlock(ZgoBTDevice device, int error);

  ///  断开连接的回调，调用disconnect断开打印机后，会调用该方法
  ///  YES表示主动断开，NO表示被动断开
  void whenDisconnect(ZgoBTDevice device, int isActive);

  static void setup(FlutterBluetoothApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterBluetoothApi.whenFindAllDevice', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenFindAllDevice was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<ZgoBTDevice?>? arg_list =
              (args[0] as List<Object?>?)?.cast<ZgoBTDevice?>();
          assert(arg_list != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenFindAllDevice was null, expected non-null List<ZgoBTDevice?>.');
          api.whenFindAllDevice(arg_list!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterBluetoothApi.onChangeAllDeviceState',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.onChangeAllDeviceState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<ZgoBTDevice?>? arg_list =
              (args[0] as List<Object?>?)?.cast<ZgoBTDevice?>();
          assert(arg_list != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.onChangeAllDeviceState was null, expected non-null List<ZgoBTDevice?>.');
          api.onChangeAllDeviceState(arg_list!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterBluetoothApi.whenConnectSuccess', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenConnectSuccess was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ZgoBTDevice? arg_device = (args[0] as ZgoBTDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenConnectSuccess was null, expected non-null ZgoBTDevice.');
          api.whenConnectSuccess(arg_device!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ZgoBTDevice? arg_device = (args[0] as ZgoBTDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock was null, expected non-null ZgoBTDevice.');
          final int? arg_error = (args[1] as int?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenConnectFailureWithErrorBlock was null, expected non-null int.');
          api.whenConnectFailureWithErrorBlock(arg_device!, arg_error!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ZgoBTDevice? arg_device = (args[0] as ZgoBTDevice?);
          assert(arg_device != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect was null, expected non-null ZgoBTDevice.');
          final int? arg_isActive = (args[1] as int?);
          assert(arg_isActive != null,
              'Argument for dev.flutter.pigeon.FlutterBluetoothApi.whenDisconnect was null, expected non-null int.');
          api.whenDisconnect(arg_device!, arg_isActive!);
          return;
        });
      }
    }
  }
}
